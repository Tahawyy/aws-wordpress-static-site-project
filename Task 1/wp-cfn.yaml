AWSTemplateFormatVersion: '2010-09-09'
Description: Scalable WordPress website with EC2, RDS, ALB, and ASG in a custom VPC.

Parameters:
  KeyName:
    Description: EC2 Key Pair
    Type: AWS::EC2::KeyPair::KeyName

  DBName:
    Description: Name of the WordPress database
    Type: String
    Default: wordpressdbcfn

  DBUser:
    Description: WordPress database user name
    Type: String
    Default: wpusercfn

  DBPassword:
    Description: WordPress database password
    Type: String
    NoEcho: true
  
  ThemeBucketName:
    Description: Name of the S3 bucket for WordPress themes
    Type: String
    AllowedPattern: "^[a-z0-9.-]+$"
    ConstraintDescription: "Bucket name must be lowercase and can only contain letters, numbers, dots, and hyphens."

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: WordPress-VPC-CFN

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IGW-CFN

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-Subnet-1-CFN

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.12.0/24
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-Subnet-2-CFN

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.13.0/24
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: Private-Subnet-1-CFN

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.14.0/24
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: Private-Subnet-2-CFN

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public-Route-Table-CFN

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  EIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private-Route-Table-CFN

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow HTTP and SSH
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Instance-SG-CFN

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow MySQL from EC2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: RDS-SG-CFN

  # S3 Bucket for WordPress themes
  ThemeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ThemeBucketName

  # Launch Template for EC2
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t3.micro
        KeyName: !Ref KeyName
        ImageId: ami-0c02fb55956c7d316 # Ensure this is valid for your region
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            amazon-linux-extras enable php7.4
            yum clean metadata
            yum install -y httpd mariadb-server php php-mysqlnd
            systemctl start httpd
            systemctl enable httpd
            systemctl start mariadb
            systemctl enable mariadb
            mysql -e "CREATE DATABASE ${DBName};"
            mysql -e "CREATE USER '${DBUser}'@'localhost' IDENTIFIED BY '${DBPassword}';"
            mysql -e "GRANT ALL PRIVILEGES ON ${DBName}.* TO '${DBUser}'@'localhost';"
            mysql -e "FLUSH PRIVILEGES;"
            cd /var/www/html
            wget https://wordpress.org/latest.tar.gz
            tar -xzf latest.tar.gz --strip-components=1
            rm -f latest.tar.gz
            cp wp-config-sample.php wp-config.php
            sed -i "s/database_name_here/${DBName}/" wp-config.php
            sed -i "s/username_here/${DBUser}/" wp-config.php
            sed -i "s/password_here/${DBPassword}/" wp-config.php
            chown apache:apache /var/www/html -R
            systemctl restart httpd
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: WordPress-Launch-Template-CFN

  # ALB
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      Scheme: internet-facing
      Type: application
      Tags:
        - Key: Name
          Value: ALB-CFN

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /
      Tags:
        - Key: Name
          Value: ALB-Target-Group-CFN

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  # Auto Scaling
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 2
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name
          Value: ASG-CFN
          PropagateAtLaunch: true

  # RDS
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: DB-Subnet-Group-CFN

  MyDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      Engine: mysql
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBName: !Ref DBName
      PubliclyAccessible: false
      MultiAZ: false
      DeletionProtection: false
      Tags:
        - Key: Name
          Value: WordPress-DB-CFN

Outputs:
  LoadBalancerDNS:
    Description: DNS of the ALB
    Value: !GetAtt ALB.DNSName